package renderer;

import static java.awt.Color.*;

import org.junit.jupiter.api.Test;

import geometries.*;
import lighting.*;
import primitives.*;
import scene.Scene;

/**
 * Testing a 3D house scene with shadows and light effects
 * @author Your Name
 */
class HouseSceneTests {

    /** Default constructor to satisfy JavaDoc generator */
    HouseSceneTests() { /* to satisfy JavaDoc generator */ }

    /** Scene of the tests */
    private final Scene          scene      = new Scene("House Scene");
    /** Camera builder of the tests */
    private final Camera.Builder camera     = Camera.getBuilder()
            .setLocation(new Point(0, 0, 1000))
            .setDirection(Point.ZERO, Vector.AXIS_Y)
            .setVpDistance(1000)
            .setVpSize(400, 400)
            .setRayTracer(scene, RayTracerType.SIMPLE);

    /** The base of the house (a square represented by 4 triangles) */
    private final Intersectable  baseHouse = new Triangle(new Point(-100, 0, -200), new Point(100, 0, -200), new Point(100, 0, -100))
            .setEmission(new Color(255, 255, 0))
            .setMaterial(new Material().setKD(0.7).setKS(0.5).setShininess(50));

    /** The roof of the house (a single triangle) */
    private final Intersectable  roofHouse = new Triangle(new Point(-100, 0, -200), new Point(100, 0, -200), new Point(0, 100, -150))
            .setEmission(new Color(0, 255, 0))
            .setMaterial(new Material().setKD(0.8).setKS(0.3).setShininess(30));

    /**
     * Helper function for the tests in this module
     * @param pictName     the name of the picture generated by a test
    the triangle for the roof and base of the house
     * @param spotLocation the spotlight location in the test
     */
    private void houseSceneHelper(String pictName, Intersectable base, Intersectable roof, Point spotLocation) {
        scene.geometries.add(base, roof);
        scene.lights.add(new SpotLight(new Color(700, 500, 300), spotLocation, new Vector(1, 1, -3))
                .setKl(1E-5).setKq(1.5E-7));
        camera
                .setResolution(600, 600)
                .build()
                .renderImage()
                .writeToImage(pictName);
    }

    /** Produce a picture of the house with a spotlight */
    @Test
    void houseSceneInitial() {
        houseSceneHelper("houseSceneInitial", baseHouse, roofHouse, new Point(-200, -200, 200));
    }

    /** House with spotlight moved closer */
    @Test
    void houseSceneCloserSpotlight() {
        houseSceneHelper("houseSceneCloserSpotlight", baseHouse, roofHouse, new Point(-150, -150, 150));
    }

    /** House with roof and a different spotlight angle */
    @Test
    void houseSceneDifferentSpotlight() {
        houseSceneHelper("houseSceneDifferentSpotlight", baseHouse, roofHouse, new Point(-100, -100, 250));
    }

    /** House with roof and moved spotlight */
    @Test
    void houseSceneMovedSpotlight() {
        // יצירת סצנה חדשה
        scene.geometries.add(baseHouse, roofHouse);

        // מיקום תאורה משודרג
        scene.lights.add(new SpotLight(new Color(700, 500, 300), new Point(-75, -75, 300), new Vector(1, 1, -3)) // שים לב לשינוי כיוון
                .setKl(1E-5).setKq(1.5E-7));

        // הגדרת מצלמה טובה יותר
        camera
                .setResolution(600, 600)
                .build()
                .renderImage()
                .writeToImage("houseSceneMovedSpotlight"); // שמירת התמונה עם שם מתאים
    }


    /** House with roof and multiple spotlights */
    @Test
    void houseSceneWithMultipleSpotlights() {
        scene.geometries.add(baseHouse, roofHouse);
        scene.lights.add(new SpotLight(new Color(800, 600, 400), new Point(-200, -200, 200), new Vector(1, 1, -2))
                .setKl(1E-5).setKq(1.5E-7));
        scene.lights.add(new SpotLight(new Color(700, 500, 300), new Point(100, 100, 200), new Vector(-1, -1, -3))
                .setKl(1E-5).setKq(1.5E-7));

        camera
                .setResolution(600, 600)
                .build()
                .renderImage()
                .writeToImage("houseSceneWithMultipleSpotlights");
    }
}
